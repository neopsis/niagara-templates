/*
  Copyright 2019 Neopsis, All Rights Reserved.
 */

plugins {
  id 'com.tridium.niagara-signing'
  id 'com.tridium.niagara' apply false
  id 'com.tridium.niagara-module' apply false
  id 'com.tridium.niagara-rjs' apply false
}

def getGradleProperty(String propName) {
  if (gradle.hasProperty(propName)) {
    gradle.getProperty(propName)
  } else {
    // Get system property, or, failing that, fall back to environment variable
    // This allows setting, e.g., -Pniagara_home=blah
    System.getProperty(propName) ?: System.getenv(propName)
  }
}

ext.niagara_home      = getGradleProperty('niagara_home')
ext.niagara_dev_home  = getGradleProperty('niagara_dev_home')
ext.niagara_user_home = getGradleProperty('niagara_user_home')

gradle.beforeProject { p ->
  configure(p) {
    def vendorSettings = file("${rootDir}/vendor.gradle")
    if (vendorSettings.exists()) {
      apply from: vendorSettings
    }
    apply from: "${rootDir}/gradle/niagara.gradle"
  }
}

task buildZip(type: Zip) {

  group 'niagara'

  def baseName       = rootProject.name
  def version        = rootProject.version
  def outputFile     = file("${gradle.ext.niagara_modules}/release.txt")
  def envasVersion   = '0.9.13'
  def commonsVersion = '4.0.3'


  dependsOn baseName + '-rt:clean'
  dependsOn baseName + '-ux:clean'
  dependsOn baseName + '-wb:clean'
  dependsOn baseName + '-rt:jar'
  dependsOn baseName + '-ux:jar'
  dependsOn baseName + '-wb:jar'

  apply from: file("${rootDir}/vendor.gradle")

  outputs.file outputFile
  outputFile.write  baseName + ": " + version + "\n"
  outputFile.append "niagara: " + "${gradle.ext.niagara_release}"


  from "${gradle.ext.niagara_modules}"
  include baseName + "-*-" + version + ".jar"
  include "envas-*-" + envasVersion + ".jar"
  include "envasCommons-*-" + commonsVersion + ".jar"
  include "release.txt"

  rename   baseName + '-(.+)-' + version + '.jar',  baseName + '-$1.jar'
  rename   'envas-(.+)-' + envasVersion + '.jar',  'envas-$1.jar'
  rename   'envasCommons-(.+)-' + commonsVersion + '.jar',  'envasCommons-$1.jar'

  archiveName    = baseName + '-' + version  + '.zip'
  destinationDir = file(file("${gradle.ext.niagara_modules}").getParent())

  doLast {
    outputFile.delete()
  }

}